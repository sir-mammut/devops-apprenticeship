name: CI v2 â€” Build, Scan, Sign & Push (GHCR)

on:
  push:
    branches: [ main ]
    tags:     [ 'v*.*.*' ]   # semantic release tags: v1.2.3
  pull_request:
    branches: [ main ]

jobs:
  docker-publish:
    runs-on: ubuntu-latest

    # Minimal but sufficient permissions
    permissions:
      contents: read           # checkout
      packages: write          # push to GHCR
      id-token: write          # OIDC for Cosign keyless signing
      security-events: write   # upload Trivy SARIF to code scanning

    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: devops-apprentice-app
      # Final image URI base we'll publish to:
      IMAGE_URI: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0   # we need tags for semver tagging

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        if: github.event_name != 'pull_request'   # only login when we will push
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker metadata (tags & labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_URI }}
          # Generate a good set of tags:
          tags: |
            type=raw,value=latest,enable={{ github.ref == 'refs/heads/main' }}
            type=sha,format=short
            type=semver,pattern={{version}},enable={{ startsWith(github.ref, 'refs/tags/v') }}
            type=semver,pattern={{major}}.{{minor}},enable={{ startsWith(github.ref, 'refs/tags/v') }}
            type=semver,pattern={{major}},enable={{ startsWith(github.ref, 'refs/tags/v') }}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Build (and push on main/tags)
        id: build
        uses: docker/build-push-action@v6
        with:
          context: ./app               # Dockerfile lives in app/
          file: app/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}   # PR = build only
          platforms: linux/amd64       # add linux/arm64 later if needed
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # Speed-up with GitHub cache
          cache-from: type=gha
          cache-to:   type=gha,mode=max

      # -------------- Security gates (only when we pushed an image) --------------
      - name: Trivy scan (fail on HIGH/CRITICAL)
        if: github.event_name != 'pull_request'
        uses: aquasecurity/trivy-action@0.33.1
        with:
          image-ref: ${{ env.IMAGE_URI }}@${{ steps.build.outputs.digest }}
          format: sarif
          output: trivy-results.sarif
          ignore-unfixed: true
          vuln-type: os,library
          severity: CRITICAL,HIGH
          exit-code: '1'    # break the build on findings

      - name: Upload Trivy SARIF to Security tab
        if: always() && github.event_name != 'pull_request'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif

      - name: Install Cosign (keyless)
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3.9.2

        # Cosign needs the OIDC permission above (id-token: write)

      - name: Sign image with Cosign (keyless, no secrets)
        if: github.event_name != 'pull_request'
        env:
          COSIGN_EXPERIMENTAL: "true"
          DIGEST: ${{ steps.build.outputs.digest }}
        run: |
          # Sign all generated tags at the digest we just built
          for tag in ${{ steps.meta.outputs.tags }}; do
            cosign sign --yes "${tag}@${DIGEST}"
          done

      - name: Generate SBOM (SPDX) with Syft (via Anchore action)
        if: github.event_name != 'pull_request'
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.IMAGE_URI }}@${{ steps.build.outputs.digest }}
          format: spdx-json
          artifact-name: sbom-${{ github.sha }}.spdx.json
          upload-artifact: true
